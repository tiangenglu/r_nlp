\name{mutualDistance}
\alias{mutualDistance}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
%%  ~~function to do ... ~~
}
\description{
%%  ~~ This function measures the distance between two patterns in a text string. The resultant list contains five items: 1) word count; 2) pattern 1 locations; 3) pattern 2 locations; 4) pattern 1 to pattern 2 distance matrix; 5) pattern 2 to pattern 1 distance matrix. ~~
}
\usage{
mutualDistance(x)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{x}{
%%     ~~Describe \code{x} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.
mutualDistance(pattern1 = "Twitter", pattern2 = "network", text = "Among many methods to study a policy debate, we chose Twitter data. Twitter data can generate different types of networks that are useful for different purposes. For example, Twitter hashtag networks illustrate the topic universe.")

## The function is currently defined as
mutualDistance <- function(pattern1, pattern2, text) {
  loc_pat1 <- which(grepl(pattern1,unlist(strsplit(text," ")), ignore.case = T)==T)
loc_pat2 <- which(grepl(pattern2,unlist(strsplit(text," ")), ignore.case = T)==T)
 word_count <- sapply(strsplit(text," "), length)
 if((length(loc_pat1)==0)==TRUE | (length(loc_pat2)==0)==TRUE)stop("At least one of the patterns were not found in the string.")
distances1to2 <- list()
{for (i in 1: length(loc_pat1)){distances1to2[[i]] <- ((abs(loc_pat1[i] - loc_pat2)))}}
distances2to1 <- list()
  {for (j in 1: length(loc_pat2)){distances2to1[[j]] <- ((abs(loc_pat2[j] - loc_pat1)))}}

mutualdistoutput  <- list(distances1to2,distances2to1)

distance1to2_m <- matrix(unlist(mutualdistoutput[[1]]), nrow = length(mutualdistoutput[[1]]), ncol = length(loc_pat2), byrow = T) # convert distance1to2 to matrix
rownames(distance1to2_m) <- paste(pattern1, seq(1:length(loc_pat1)), sep = "_")
colnames(distance1to2_m) <- paste(pattern2, seq(1:length(loc_pat2)), sep = "_")

distance2to1_m <- matrix(unlist(mutualdistoutput[[2]]), nrow = length(mutualdistoutput[[2]]), ncol = length(loc_pat1), byrow = T) # convert distance1to2 to matrix
rownames(distance2to1_m) <- paste(pattern2, seq(1: length(loc_pat2)), sep = "_")
colnames(distance2to1_m) <- paste(pattern1, seq(1:length(loc_pat1)), sep = "_")
outputs <- list(word_count,loc_pat1, loc_pat2, distance1to2_m, distance2to1_m)
names(outputs) <- c("wordcount","pat1_loc","pat2_loc","dist1to2","dist2to1")
return(outputs)
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory (show via RShowDoc("KEYWORDS")):
% \keyword{ ~kwd1 }
% \keyword{ ~kwd2 }
% Use only one keyword per line.
% For non-standard keywords, use \concept instead of \keyword:
% \concept{ ~cpt1 }
% \concept{ ~cpt2 }
% Use only one concept per line.
